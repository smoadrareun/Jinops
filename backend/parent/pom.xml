<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.hebeu</groupId>
    <artifactId>parent</artifactId>
    <version>1.0-SNAPSHOT</version>

    <packaging>pom</packaging>
    <name>parent</name>
    <description>This is parent project</description>

    <!-- 子模块清单（创建新子模块后，会自动填入）-->
    <modules>
        <module>common</module>
        <module>manager</module>
    </modules>

    <!-- 本项目的父模块使用spring-boot框架 -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.6.4</version>
    </parent>

    <!-- 项目自定义属性 -->
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>17</java.version>

        <!-- 依赖的版本号：在定义版本时，要注意的是不同的依赖版本之间会有影响，有些最新的版本不支持其他依赖的低版本一起使用-->
        <spring.cloud.version>Finchley.SR4</spring.cloud.version>
        <maven.plugin.version>1.3.0.RELEASE</maven.plugin.version>
        <maven.jar.plugin.version>2.4</maven.jar.plugin.version>
        <maven.compiler.plugin.version>3.8.1</maven.compiler.plugin.version>
        <maven.surefire.plugin.version>2.22.2</maven.surefire.plugin.version>
        <maven.assembly.plugin.version>3.0.0</maven.assembly.plugin.version>

        <spring.version>5.3.12</spring.version>
        <spring.boot.version>2.6.7</spring.boot.version>

        <commons.lang3.version>3.12.0</commons.lang3.version>
        <commons.io.version>1.3.2</commons.io.version>
        <commons.net.version>3.3</commons.net.version>
        <commons.codec.version>1.10</commons.codec.version>
        <commons.fileupload.version>1.4</commons.fileupload.version>

        <dubbo.spring.boot.version>2.7.8</dubbo.spring.boot.version>
        <mybatis.spring.boot.version>2.2.0</mybatis.spring.boot.version>
        <mybatis.plus.boot.version>3.5.1</mybatis.plus.boot.version>
        <pagehelper.version>5.3.0</pagehelper.version>
        <jsqlparser.version>4.3</jsqlparser.version>
        <pagehelper.spring.boot.version>1.4.1</pagehelper.spring.boot.version>
        <druid.version>1.2.8</druid.version>
        <druid.spring.boot.version>1.2.8</druid.spring.boot.version>

        <lombok.version>1.18.22</lombok.version>
        <junit.version>4.13.2</junit.version>
        <aspectjweaver.version>1.9.7</aspectjweaver.version>
        <mysql.version>8.0.25</mysql.version>

        <hadoop.client.version>3.3.1</hadoop.client.version>
        <httpclient.version>4.5.13</httpclient.version>
        <jstl.version>1.2</jstl.version>
        <javax.servlet.api.version>4.0.1</javax.servlet.api.version>
        <jsp.api.version>2.3.3</jsp.api.version>
        <annotation.api.version>1.3.2</annotation.api.version>

        <jackson.version>2.12.5</jackson.version>
        <fastjson.version>1.2.79</fastjson.version>
        <gson.version>2.8.9</gson.version>
        <joda.time.version>2.10.13</joda.time.version>
        <pinyin4j.version>2.5.1</pinyin4j.version>
        <persistence.api.version>1.0.2</persistence.api.version>
        <logging.log4j.version>2.17.2</logging.log4j.version>
        <log4j.version>1.2.17</log4j.version>
        <java.jwt.version>3.8.2</java.jwt.version>
        <javax.mail.version>1.6.2</javax.mail.version>
        <tencentcloud.sdk.version>3.1.423</tencentcloud.sdk.version>
        <shiro.core.version>1.4.1</shiro.core.version>
        <zookeeper.version>3.8.0</zookeeper.version>
        <curator.version>5.1.0</curator.version>
        <fastdfs.client.version>1.27</fastdfs.client.version>
        <minio.version>8.2.1</minio.version>

        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
    </properties>

    <!-- 项目依赖项 -->
    <!-- dependencyManagement只是声明依赖，并不实现引入 -->
    <dependencyManagement>
        <dependencies>
            <!-- Spring Cloud -->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring.cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!-- Spring -->
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-context</artifactId>
                <version>${spring.version}</version>
            </dependency>

<!--            <dependency>-->
<!--                <groupId>org.springframework</groupId>-->
<!--                <artifactId>spring-beans</artifactId>-->
<!--                <version>${spring.version}</version>-->
<!--            </dependency>-->

            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-web</artifactId>
                <version>${spring.version}</version>
            </dependency>

            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-webmvc</artifactId>
                <version>${spring.version}</version>
            </dependency>

<!--            <dependency>-->
<!--                <groupId>org.springframework</groupId>-->
<!--                <artifactId>spring-jdbc</artifactId>-->
<!--                <version>${spring.version}</version>-->
<!--            </dependency>-->

<!--            <dependency>-->
<!--                <groupId>org.springframework</groupId>-->
<!--                <artifactId>spring-aspects</artifactId>-->
<!--                <version>${spring.version}</version>-->
<!--            </dependency>-->

<!--            <dependency>-->
<!--                <groupId>org.springframework</groupId>-->
<!--                <artifactId>spring-context-support</artifactId>-->
<!--                <version>${spring.version}</version>-->
<!--            </dependency>-->

            <!-- Spring Boot -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring.boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot</artifactId>
                <version>${spring.boot.version}</version>
            </dependency>

            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-autoconfigure</artifactId>
                <version>${spring.boot.version}</version>
            </dependency>

            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter</artifactId>
                <version>${spring.boot.version}</version>
            </dependency>

            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-web</artifactId>
                <version>${spring.boot.version}</version>
            </dependency>

            <!-- 测试 -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-test</artifactId>
                <scope>test</scope>
                <version>${spring.boot.version}</version>
            </dependency>

            <!-- JDBC -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-data-jdbc</artifactId>
                <version>${spring.boot.version}</version>
            </dependency>

            <!-- Redis -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-data-redis</artifactId>
                <version>${spring.boot.version}</version>
            </dependency>

            <!-- Tomcat -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-tomcat</artifactId>
                <scope>provided</scope>
                <version>${spring.boot.version}</version>
            </dependency>

            <!-- thymeleaf：前后端数据交互模板引擎 -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-thymeleaf</artifactId>
                <version>${spring.boot.version}</version>
            </dependency>

            <!-- JPA注解 -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-data-jpa</artifactId>
                <version>${spring.boot.version}</version>
            </dependency>

            <!-- Hibernate-Validator -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-validation</artifactId>
                <version>${spring.boot.version}</version>
            </dependency>

            <!-- 发送邮件 -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-mail</artifactId>
                <version>${spring.boot.version}</version>
            </dependency>

            <!-- Spring Security -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-security</artifactId>
                <version>${spring.boot.version}</version>
            </dependency>

            <!-- Spring AOP -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-aop</artifactId>
                <version>${spring.boot.version}</version>
            </dependency>

            <!-- RabbitMQ -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-amqp</artifactId>
                <version>${spring.boot.version}</version>
            </dependency>

            <!-- 热部署插件 -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-devtools</artifactId>
                <version>${spring.boot.version}</version>
                <scope>runtime</scope>
                <optional>true</optional>
            </dependency>

<!--            &lt;!&ndash; Apache工具组件 &ndash;&gt;-->
<!--            <dependency>-->
<!--                <groupId>org.apache.commons</groupId>-->
<!--                <artifactId>commons-lang3</artifactId>-->
<!--                <version>${commons.lang3.version}</version>-->
<!--            </dependency>-->

<!--            <dependency>-->
<!--                <groupId>commons-io</groupId>-->
<!--                <artifactId>commons-io</artifactId>-->
<!--                <version>${commons.io.version}</version>-->
<!--            </dependency>-->

<!--            <dependency>-->
<!--                <groupId>commons-net</groupId>-->
<!--                <artifactId>commons-net</artifactId>-->
<!--                <version>${commons.net.version}</version>-->
<!--            </dependency>-->

            <!-- 文件上传组件 -->
            <dependency>
                <groupId>commons-fileupload</groupId>
                <artifactId>commons-fileupload</artifactId>
                <version>${commons.fileupload.version}</version>
            </dependency>

<!--            &lt;!&ndash; 用于摘要运算、编码解码 &ndash;&gt;-->
<!--            <dependency>-->
<!--                <groupId>commons-codec</groupId>-->
<!--                <artifactId>commons-codec</artifactId>-->
<!--                <version>${commons.codec.version}</version>-->
<!--            </dependency>-->

            <!-- Dubbo -->
            <dependency>
                <groupId>org.apache.dubbo</groupId>
                <artifactId>dubbo-spring-boot-starter</artifactId>
                <version>${dubbo.spring.boot.version}</version>
            </dependency>

<!--            <dependency>-->
<!--                <groupId>org.apache.dubbo</groupId>-->
<!--                <artifactId>dubbo-bom</artifactId>-->
<!--                <version>${dubbo.spring.boot.version}</version>-->
<!--                <type>pom</type>-->
<!--                <scope>import</scope>-->
<!--            </dependency>-->

<!--            &lt;!&ndash; Mybatis &ndash;&gt;-->
<!--            <dependency>-->
<!--                <groupId>org.mybatis.spring.boot</groupId>-->
<!--                <artifactId>mybatis-spring-boot-starter</artifactId>-->
<!--                <version>${mybatis.spring.boot.version}</version>-->
<!--            </dependency>-->

            <!-- Mybatis-plus -->
            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>mybatis-plus-boot-starter</artifactId>
                <version>${mybatis.plus.boot.version}</version>
            </dependency>

            <!-- 添加分页插件-->
            <dependency>
                <groupId>com.github.pagehelper</groupId>
                <artifactId>pagehelper</artifactId>
                <version>${pagehelper.version}</version>
            </dependency>

            <dependency>
                <groupId>com.github.jsqlparser</groupId>
                <artifactId>jsqlparser</artifactId>
                <version>${jsqlparser.version}</version>
            </dependency>

            <dependency>
                <groupId>com.github.pagehelper</groupId>
                <artifactId>pagehelper-spring-boot-autoconfigure</artifactId>
                <version>${pagehelper.spring.boot.version}</version>
            </dependency>

            <dependency>
                <groupId>com.github.pagehelper</groupId>
                <artifactId>pagehelper-spring-boot-starter</artifactId>
                <version>${pagehelper.spring.boot.version}</version>
            </dependency>

            <!-- 添加数据库连接池依赖 -->
            <!--            <dependency>-->
            <!--                <groupId>com.alibaba</groupId>-->
            <!--                <artifactId>druid</artifactId>-->
            <!--                <version>${druid.version}</version>-->
            <!--            </dependency>-->

            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid-spring-boot-starter</artifactId>
                <version>${druid.spring.boot.version}</version>
            </dependency>

            <!-- 添加mysql驱动依赖 -->
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <scope>runtime</scope>
                <version>${mysql.version}</version>
            </dependency>

            <!-- 简化Entity代码（实体类添加@Data，编译时为所有字段添加@ToString/@EqualsAndHashCode/@Getter/为非final字段添加@Setter） -->
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
            </dependency>

            <!-- 添加junit4依赖 单元测试-->
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>${junit.version}</version>
                <scope>test</scope>
            </dependency>

<!--            &lt;!&ndash; 切面 &ndash;&gt;-->
<!--            <dependency>-->
<!--                <groupId>org.aspectj</groupId>-->
<!--                <artifactId>aspectjweaver</artifactId>-->
<!--                <version>${aspectjweaver.version}</version>-->
<!--            </dependency>-->

<!--            &lt;!&ndash; 添加HDFS依赖 &ndash;&gt;-->
<!--            <dependency>-->
<!--                <groupId>org.apache.hadoop</groupId>-->
<!--                <artifactId>hadoop-client</artifactId>-->
<!--                <version>${hadoop.client.version}</version>-->
<!--            </dependency>-->

<!--            &lt;!&ndash; httpclient &ndash;&gt;-->
<!--            <dependency>-->
<!--                <groupId>org.apache.httpcomponents</groupId>-->
<!--                <artifactId>httpclient</artifactId>-->
<!--                <version>${httpclient.version}</version>-->
<!--            </dependency>-->

            <!-- JSP相关 -->
            <dependency>
                <groupId>jstl</groupId>
                <artifactId>jstl</artifactId>
                <scope>provided</scope>
                <version>${jstl.version}</version>
            </dependency>

            <dependency>
                <groupId>javax.servlet</groupId>
                <artifactId>javax.servlet-api</artifactId>
                <version>${javax.servlet.api.version}</version>
                <scope>provided</scope>
            </dependency>

            <dependency>
                <groupId>javax.servlet.jsp</groupId>
                <artifactId>javax.servlet.jsp-api</artifactId>
                <version>${jsp.api.version}</version>
            </dependency>

<!--            <dependency>-->
<!--                <groupId>javax.annotation</groupId>-->
<!--                <artifactId>javax.annotation-api</artifactId>-->
<!--                <version>${annotation.api.version}</version>-->
<!--            </dependency>-->

            <!-- Jackson Json处理工具包 -->
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-databind</artifactId>
                <version>${jackson.version}</version>
            </dependency>

            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-core</artifactId>
                <version>${jackson.version}</version>
            </dependency>

            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-annotations</artifactId>
                <version>${jackson.version}</version>
            </dependency>

            <!-- fastJson用于对JSON格式的数据进行解析和打包 -->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>fastjson</artifactId>
                <version>${fastjson.version}</version>
            </dependency>

            <dependency>
                <groupId>com.google.code.gson</groupId>
                <artifactId>gson</artifactId>
                <version>${gson.version}</version>
                <scope>compile</scope>
            </dependency>

            <!-- 在Java中处理日期和时间是很常见的需求，基础的工具类就是我们熟悉的Date和Calendar，然而这些工具类的api使用并不是很方便和强大，于是就诞生了Joda-Time这个专门处理日期时间的库。-->
            <dependency>
                <groupId>joda-time</groupId>
                <artifactId>joda-time</artifactId>
                <version>${joda.time.version}</version>
            </dependency>



<!--            &lt;!&ndash; 用于转换拼音，调用PinyinHelper类的静态工具方法 &ndash;&gt;-->
<!--            <dependency>-->
<!--                <groupId>com.belerweb</groupId>-->
<!--                <artifactId>pinyin4j</artifactId>-->
<!--                <version>${pinyin4j.version}</version>-->
<!--            </dependency>-->

<!--            &lt;!&ndash; JPA的宗旨是为POJO提供持久化标准规范，比如@Table注解 &ndash;&gt;-->
<!--            <dependency>-->
<!--                <groupId>javax.persistence</groupId>-->
<!--                <artifactId>persistence-api</artifactId>-->
<!--                <version>${persistence.api.version}</version>-->
<!--            </dependency>-->

            <!-- 日志处理 -->
            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-api</artifactId>
                <version>${logging.log4j.version}</version>
            </dependency>

            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-core</artifactId>
                <version>${logging.log4j.version}</version>
            </dependency>

            <dependency>
                <groupId>log4j</groupId>
                <artifactId>log4j</artifactId>
                <version>${log4j.version}</version>
            </dependency>

            <!-- 生成token -->
            <dependency>
                <groupId>com.auth0</groupId>
                <artifactId>java-jwt</artifactId>
                <version>${java.jwt.version}</version>
            </dependency>

            <!-- 处理邮件 -->
            <dependency>
                <groupId>com.sun.mail</groupId>
                <artifactId>javax.mail</artifactId>
                <version>${javax.mail.version}</version>
            </dependency>

            <!-- 发送短信 -->
            <dependency>
                <groupId>com.tencentcloudapi</groupId>
                <artifactId>tencentcloud-sdk-java</artifactId>
                <version>${tencentcloud.sdk.version}</version>
            </dependency>

            <!-- shiro权限管理 -->
            <dependency>
                <groupId>org.apache.shiro</groupId>
                <artifactId>shiro-core</artifactId>
                <version>${shiro.core.version}</version>
            </dependency>

            <!-- Zookeeper -->
<!--            <dependency>-->
<!--                <groupId>org.apache.zookeeper</groupId>-->
<!--                <artifactId>zookeeper</artifactId>-->
<!--                <version>${zookeeper.version}</version>-->
<!--            </dependency>-->

            <dependency>
                <groupId>org.apache.curator</groupId>
                <artifactId>curator-framework</artifactId>
                <version>${curator.version}</version>
            </dependency>

            <dependency>
                <groupId>org.apache.curator</groupId>
                <artifactId>curator-recipes</artifactId>
                <version>${curator.version}</version>
            </dependency>

            <dependency>
                <groupId>org.apache.curator</groupId>
                <artifactId>curator-x-discovery</artifactId>
                <version>${curator.version}</version>
            </dependency>

<!--            &lt;!&ndash; FastDFS &ndash;&gt;-->
<!--            <dependency>-->
<!--                <groupId>cn.bestwu</groupId>-->
<!--                <artifactId>fastdfs-client-java</artifactId>-->
<!--                <version>${fastdfs.client.version}</version>-->
<!--            </dependency>-->

            <!--minio-->
            <dependency>
                <groupId>io.minio</groupId>
                <artifactId>minio</artifactId>
                <version>${minio.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <!-- <scope>主要管理依赖的部署
       * compile，缺省值，适用于所有阶段，会随着项目一起发布。
       * provided，类似compile，期望JDK、容器或使用者会提供这个依赖。如servlet.jar。
       * runtime，只在运行时使用，如JDBC驱动，适用运行和测试阶段。
       * test，只在测试时使用，用于编译和运行测试代码。不会随项目发布。
       * system，类似provided，需要显式提供包含依赖的jar，Maven不会在Repository中查找它。
    -->

    <build>
        <plugins>
            <!-- 配置当前项目的jdk版本信息 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven.compiler.plugin.version}</version>
                <configuration>
                    <source>${maven.compiler.source}</source>
                    <target>${maven.compiler.target}</target>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>
            <!--打包跳过测试-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven.surefire.plugin.version}</version>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>
<!--            <plugin>-->
<!--                <groupId>org.apache.maven.plugins</groupId>-->
<!--                <artifactId>maven-jar-plugin</artifactId>-->
<!--                <version>${maven.jar.plugin.version}</version>-->
<!--                <configuration>-->
<!--                    <archive>-->
<!--                        <manifest>-->
<!--                            &lt;!&ndash; 告知 maven-jar-plugin添加一个 Class-Path元素到 MANIFEST.MF文件，以及在Class-Path元素中包括所有依赖项 &ndash;&gt;-->
<!--                            <addClasspath>true</addClasspath>-->
<!--                            &lt;!&ndash; 所有的依赖项应该位于 lib文件夹 &ndash;&gt;-->
<!--                            <classpathPrefix>lib/</classpathPrefix>-->
<!--                            &lt;!&ndash; 当用户使用 lib命令执行JAR文件时，使用该元素定义将要执行的类名 &ndash;&gt;-->
<!--                            <mainClass>com.hebeu.Application</mainClass>-->
<!--                        </manifest>-->
<!--                    </archive>-->
<!--                </configuration>-->
<!--            </plugin>-->
        </plugins>
    </build>
</project>